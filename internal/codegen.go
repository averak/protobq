package internal

import (
	"runtime/debug"

	"github.com/averak/protobq/internal/protobuf/protobq"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
)

//goland:noinspection GoSnakeCaseUsage
var (
	timeIdents = struct {
		Duration protogen.GoIdent
	}{
		Duration: protogen.GoImportPath("time").Ident("Duration"),
	}
	protoIdents = struct {
		GetExtension protogen.GoIdent
	}{
		GetExtension: protogen.GoImportPath("google.golang.org/protobuf/proto").Ident("GetExtension"),
	}
	internalIdents = struct {
		MaterializedView   protogen.GoIdent
		E_MaterializedView protogen.GoIdent
	}{
		MaterializedView:   protogen.GoImportPath("github.com/averak/protobq/internal/protobuf/protobq").Ident("MaterializedView"),
		E_MaterializedView: protogen.GoImportPath("github.com/averak/protobq/internal/protobuf/protobq").Ident("E_MaterializedView"),
	}
	protobqIdents = struct {
		MaterializedView        protogen.GoIdent
		MaterializedViewOptions protogen.GoIdent
	}{
		MaterializedView:        protogen.GoImportPath("github.com/averak/protobq").Ident("MaterializedView"),
		MaterializedViewOptions: protogen.GoImportPath("github.com/averak/protobq").Ident("MaterializedViewOptions"),
	}
)

type CodeGenerator struct {
	plugin *protogen.Plugin
	file   *protogen.File
}

func NewCodeGenerator(plugin *protogen.Plugin, file *protogen.File) *CodeGenerator {
	return &CodeGenerator{
		plugin: plugin,
		file:   file,
	}
}

func (g CodeGenerator) Gen() error {
	if !g.shouldGenerate() {
		return nil
	}

	filename := g.file.GeneratedFilenamePrefix + ".protobq.go"
	gf := g.plugin.NewGeneratedFile(filename, g.file.GoImportPath)

	{ // generate file header
		info, _ := debug.ReadBuildInfo()
		gf.P("// Code generated by ", info.Path, ". DO NOT EDIT.")
		gf.P("// source: ", g.file.Desc.Path())
		gf.P()
		gf.P("package ", g.file.GoPackageName)
		gf.P()
	}
	{ // generate materialized view schema
		for _, msg := range g.file.Messages {
			if !g.isMaterializedViewSchema(msg) {
				continue
			}

			gf.P("var _ ", protobqIdents.MaterializedView, " = (*", msg.GoIdent.GoName, ")(nil)")
			gf.P()
			gf.P("func (mv *", msg.GoIdent.GoName, ") Options() ", protobqIdents.MaterializedViewOptions, " {")
			gf.P("    ext, _ := ", protoIdents.GetExtension, "(mv.ProtoReflect().Descriptor().Options(), ", internalIdents.E_MaterializedView, ").(*", internalIdents.MaterializedView, ")")
			gf.P("    return ", protobqIdents.MaterializedViewOptions, "{")
			gf.P("        EnableRefresh: ext.GetEnableRefresh(),")
			gf.P("        RefreshInterval: ", timeIdents.Duration, "(ext.GetRefreshIntervalMinutes()) * time.Minute,")
			gf.P("    }")
			gf.P("}")
			gf.P()
		}
	}
	return nil
}

func (g CodeGenerator) shouldGenerate() bool {
	for _, msg := range g.file.Messages {
		if g.isMaterializedViewSchema(msg) {
			return true
		}
	}
	return false
}

func (g CodeGenerator) isMaterializedViewSchema(msg *protogen.Message) bool {
	opts := msg.Desc.Options()
	if opts == nil {
		return false
	}

	ext, ok := proto.GetExtension(opts, protobq.E_MaterializedView).(*protobq.MaterializedView)
	if !ok {
		return false
	}
	return ext.GetIsMaterializedView()
}
